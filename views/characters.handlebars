<div class="container-fluid">
    <h2>View Characters</h2>
    <div class="clearfix">
        <a role="button" class="btn btn-primary float-start" href="/chars/add">Add Character</a>
        <a role="button" class="btn btn-primary float-end" aria-label="Search"><i data-feather="search"></i>Search</a>
    </div>
    <div id="chars" class="table-responsive mt-2">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">First Name</th>
                    <th scope="col">Last Name</th>
                    <th scope="col">Life Stage</th>
                    <th scope="col">Region</th>
                    <th scope="col">Specialty</th>
                    <th scope="col">Tool</th>
                    <th scope="col">Equipment</th>
                    <th scope="col">Available</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                {{#each rows}}
                    <tr>
                        <td>{{this.firstName}}</td>
                        <td>{{this.lastName}}</td>
                        <td>{{this.lifeStage}}</td>
                        <td>{{this.region}}</td>
                        <td>{{this.specialty}}</td>
                        <td>
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#toolCheck" id="{{this.charaId}}"><i data-feather="tag" aria-label="Check"></i></button>
                        </td>
                        <td>
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#equipCheck" id="{{this.charaId}}"><i data-feather="tag" aria-label="Check"></i></button>
                        </td>
                        <td>{{#if this.available}}Yes{{else}}No{{/if}}</td>
                        <td>{{> buttonCluster uid=this.charaId fname=this.firstName lname=this.lastName}}</td>
                    </tr>
                {{/each}}
            </tbody>
        </table>
    </div>

    <div class="offcanvas offcanvas-top h-50" tabindex="-1" id="editRow" aria-labelledby="editRowLabel">
        <div class="offcanvas-header">
            <h3 class="offcanvas-title" id="editRowLabel">Edit Character</h3>
        </div>
        <div class="offcanvas-body">
            <div id="editRowForm">
                <form id="editChar" name="char">
                    <div class="row mb-3 justify-content-left">
                        <div class="col-2">
                            <input type="text" class="form-control" placeholder="First name" id="charFirst" name="fname" aria-label="First name" required aria-required="true">
                        </div>
                        <div class="col-2">
                            <input type="text" class="form-control" placeholder="Last name" id="charLast" name="lname" aria-label="Last name" required aria-required="true">
                        </div>
                    </div>
                    <div class="row mb-3 justify-content-left">
                        <div class="col-2">
                            <input type="text" class="form-control" placeholder="Life Stage" id="lifeStage" name="lstage" aria-label="Life stage">
                        </div>
                        <div class="col-3">
                            <input type="text" class="form-control" placeholder="Region" id="region" name="reg" aria-label="Region" required aria-required="true">
                        </div>
                        <div class="col-3">
                            <input type="text" class="form-control" placeholder="Specialty" id="specialty" name="sp" aria-label="Specialty">
                        </div>
                    </div>
                    <div class="row mb-3 justify-content-left">
                        <div class="col-3">
                            <label for="toolSelect" class="form-label">Tools:</label>
                            <select class="form-select" size="5" aria-label="multiple select tools" id="toolSelect" name="tools" multiple>
                                {{#each tools}}
                                    <option value="{{this.toolId}}">{{this.toolName}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div class="col-3">
                            <label for="equipSelect" class="form-label">Equipment:</label>
                            <select class="form-select" size="5" aria-label="multiple select equipment" name="equip" id="equipSelect" multiple>
                                {{#each equips}}
                                    <option value="{{this.equipId}}">{{this.equipName}}</option>
                                {{/each}}
                            </select>
                        </div>
                    </div>
                    <div class="row mb-3 justify-content-left">
                        <div class="col-4">
                            <input class="form-check-input" type="checkbox" value="1" id="availCheck" name="avail">
                            <label for="availCheck" class="form-check-label">Available</label>
                        </div>
                    </div>
                    <div class="row justify-content-left">
                        <div class="col-4">
                            <button type="submit" id="submitChar" class="btn btn-primary">Edit Character</button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="clearfix">
                <button type="button" class="btn btn-secondary float-end" data-bs-dismiss="offcanvas" data-bs-target="editRow" aria-label="Cancel">Cancel</a> 
            </div>
        </div>
    </div>

    <div class="modal fade" id="toolCheck" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="toolCheck" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Tools</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="toolsModalTable"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="equipCheck" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="equipCheck" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Equipment</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="equipModalTable"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="deleteVerify" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="equipCheck" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Are you sure?</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="container-fluid">
                        <div id="delMessage"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" id="">Delete</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    var editForm = document.getElementById('editChar');

    editForm.addEventListener('submit', event => {
        event.preventDefault();

        let fname = editForm[0].value;
        let lname = editForm[1].value;
        let ls = editForm[2].value;
        let reg = editForm[3].value;
        let sp = editForm[4].value;
        let avail = (editForm[7].innerText == "Yes") ? 1 : 0;

        let tools = [];
        let equip = [];

        let toolSelect = document.getElementById('toolSelect');
        let equipSelect = document.getElementById('equipSelect');

        for (const opt in toolSelect.options) {
            if (toolSelect.options[opt].selected == true) tools.push(toolSelect.options[opt].value);
        }

        for (const opt in equipSelect.options) {
            if (equipSelect.options[opt].selected == true) equip.push(equipSelect.options[opt].value);
        }

        var body = {
            "firstName": fname,
            "lastName": lname,
            "lifeStage": ls,
            "region": reg,
            "specialty": sp,
            "tools": tools,
            "equip": equip,
            "available": avail
        };

        var req = new XMLHttpRequest();

        req.open("PUT", "/api/chars");
        req.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        req.send(JSON.stringify(body));

        req.addEventListener('load', function(e) {
            if (req.status == 200) {
                window.location.reload();
            } else {
                alert("Failed");
            }
        });

    });

    var toolModal = document.getElementById('toolCheck');

    toolModal.addEventListener('show.bs.modal', function (event) {
        var req = new XMLHttpRequest();

        let uid = event.relatedTarget.id;

        req.open("GET", '/api/tool?id=' + uid);
        req.setRequestHeader('Accept', 'application/json; charset=utf-8');
        req.send(null);

        req.addEventListener('load', function() {

            let response = JSON.parse(req.responseText);
            let head = ['Name', 'Type', 'Material', 'Level', 'Enchantment'];

            var table = document.createElement('table');
            table.setAttribute('class', 'table');

            var header = document.createElement('thead');
            
            head.forEach(label => {
                let h = document.createElement('th')
                h.setAttribute('scope', 'col');
                h.innerText = label;
                header.append(h);
            });

            table.append(header);

            response.rows.forEach(tool => {
                let row = document.createElement('tr');

                var data = document.createElement('td');
                data.innerText = tool.toolName;
                row.appendChild(data);
                var data = document.createElement('td');
                data.innerText = tool.type;
                row.appendChild(data);
                var data = document.createElement('td');
                data.innerText = tool.material;
                row.appendChild(data);
                var data = document.createElement('td');
                data.innerText = tool.level;
                row.appendChild(data);
                var data = document.createElement('td');
                data.innerText = tool.enchantName;
                row.appendChild(data);

                table.append(row);
            });

            document.getElementById('toolsModalTable').append(table);

        });
    });

    toolModal.addEventListener('hidden.bs.modal', function (event) {
        document.getElementById('toolsModalTable').firstChild.remove();
    });

    var equipModal = document.getElementById('equipCheck');

    equipModal.addEventListener('show.bs.modal', function (event) {
        var req = new XMLHttpRequest();

        let uid = event.relatedTarget.id;

        req.open("GET", '/api/equip?id=' + uid);
        req.setRequestHeader('Accept', 'application/json; charset=utf-8');
        req.send(null);

        req.addEventListener('load', function() {
            let response = JSON.parse(req.responseText);
            let head = ['Name', 'Equipable Location', 'Weight', 'Material', 'Level', 'Enchantment'];

            var table = document.createElement('table');
            table.setAttribute('class', 'table');

            var header = document.createElement('thead');
            
            head.forEach(label => {
                let h = document.createElement('th')
                h.setAttribute('scope', 'col');
                h.innerText = label;
                header.append(h);
            });

            table.append(header);

            response.rows.forEach(equip => {
                let row = document.createElement('tr');

                var data = document.createElement('td');
                data.innerText = equip.equipName;
                row.appendChild(data);
                var data = document.createElement('td');
                data.innerText = equip.location;
                row.appendChild(data);
                var data = document.createElement('td');
                data.innerText = equip.weight;
                row.appendChild(data);
                var data = document.createElement('td');
                data.innerText = equip.material;
                row.appendChild(data);
                var data = document.createElement('td');
                data.innerText = equip.level;
                row.appendChild(data);
                var data = document.createElement('td');
                data.innerText = equip.enchantName;
                row.appendChild(data);

                table.append(row);
            });

            document.getElementById('equipModalTable').append(table);
        });
    });

    equipModal.addEventListener('hidden.bs.modal', function (event) {
        document.getElementById('equipModalTable').firstChild.remove();
    });

    var delModal = document.getElementById('deleteVerify');

    var delButton = delModal.getElementsByClassName("modal-footer")[0].children[0];

    delButton.addEventListener('click', function(e) {
        let uid = delButton.id;

        var req = new XMLHttpRequest();

        req.open('DELETE', '/api/char?id=' + uid);
        req.send(null);

        req.onload = function(event) {
            if (req.status == 200) {
                window.location.reload();
            } else {
                window.alert("Failed to Delete!");
            }
        };
    });

    delModal.addEventListener('show.bs.modal', function(event) {
        let params = event.relatedTarget.id.split('_');

        delButton.setAttribute('id', params[0]);

        var message = document.createElement('h3');
        message.innerText = 'You are about to delete ' + params[1] + ' ' + params[2] + ' from the database!';

        document.getElementById('delMessage').append(message);
    });

    delModal.addEventListener('hidden.bs.modal', function (event) {
        delButton.setAttribute('id', '');
        document.getElementById('delMessage').firstChild.remove();
    });

    var editOffcanvas = document.getElementById('editRow');

    editOffcanvas.addEventListener('show.bs.offcanvas', function(event) {

        let row = event.relatedTarget.parentNode.parentNode;
        let toolSelect = document.getElementById('toolSelect');
        let equipSelect = document.getElementById('equipSelect');

        var prereq = new XMLHttpRequest();

        prereq.open('GET', '/api/chars/equips?id=' + event.relatedTarget.id);
        prereq.setRequestHeader('Accept', 'application/json; charset=utf-8');
        prereq.send(null);

        prereq.addEventListener('load', function(e) {
            try {
                let pEquips = JSON.parse(prereq.responseText);
                if (pEquips.equips.length > 0) {
                    for (const opt in equipSelect.options) {
                        pEquips.equips.forEach(eq => {
                            if (equipSelect.options[opt].innerText == eq.equipName) equipSelect.options[opt].selected = true;
                        });
                    }
                }
            } catch(err) { }  
        });

         var prereq2 = new XMLHttpRequest();

        prereq2.open('GET', '/api/chars/tools?id=' + event.relatedTarget.id);
        prereq2.setRequestHeader('Accept', 'application/json; charset=utf-8');
        prereq2.send(null);

        prereq2.addEventListener('load', function(e) {
            try {
                let pTools = JSON.parse(prereq2.responseText);
                if (pTools.tools.length > 0) {
                    for (const opt in toolSelect.options) {
                        pTools.tools.forEach(tq => {
                            if (toolSelect.options[opt].innerText == tq.toolName) toolSelect.options[opt].selected = true;
                        });
                    }
                   
                }
            } catch(err) { }
        });

        let fname = document.getElementById('charFirst');
        let lname = document.getElementById('charLast');
        let stage = document.getElementById('lifeStage');
        let region = document.getElementById('region');
        let spec = document.getElementById('specialty');
        let availCheck = document.getElementById('availCheck');

        fname.value = row.children[0].innerText;
        lname.value = row.children[1].innerText;
        stage.value = row.children[2].innerText;
        region.value = row.children[3].innerText;
        spec.value = row.children[4].innerText;

        if (row.children[7].innerText == "Yes") availCheck.checked = true;

    });

    editOffcanvas.addEventListener("hidden.bs.offcanvas", function(event) {

        document.getElementById('availCheck').checked = false;

        let toolSelect = document.getElementById('toolSelect');
        let equipSelect = document.getElementById('equipSelect');

        for (const opt in toolSelect.options) {
            if (toolSelect.options[opt].selected == true) toolSelect.options[opt].selected = false;
        }

        for (const opt in equipSelect.options) {
            if (equipSelect.options[opt].selected == true) equipSelect.options[opt].selected = false;
        }
    });
</script>